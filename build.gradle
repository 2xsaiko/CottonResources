buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = 'Fabric'
			url = 'http://maven.modmuss50.me/'
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "net.fabricmc:fabric-loom:0.2.0-SNAPSHOT"
	}
}

plugins {
	id "com.jfrog.artifactory" version "4.9.0"
}

apply plugin: net.fabricmc.loom.LoomGradlePlugin
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = "cotton-resources"
group = "io.github.cottonmc"
version = "0.0.1+19w02a-SNAPSHOT"

repositories {
	mavenLocal()
	maven {
		//jankson
		url "http://repo.elytradev.com/"
	}
	maven {
		//cotton
		url "http://server.bbkr.space:8081/artifactory/libs-snapshot"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:19w02a"
	mappings "net.fabricmc:yarn:19w02a.24"
	modCompile "net.fabricmc:fabric-loader:0.3.2.96"
	modCompile "net.fabricmc:fabric:0.1.4.73"

	//the main cotton api.
	modCompile "io.github.cottonmc:cotton:0.0.2+19w02a-SNAPSHOT"

	//Neither of these are used at the moment
	//implementation "blue.endless:jankson:1.0.0-7"
	//modCompile "io.github.prospector.silk:SilkAPI:1.0.0-25"

	implementation "com.google.code.findbugs:jsr305:3.0.2"
}

if(rootProject.file('private.gradle').exists()) { //gives people more ways to configure the project for publish
	apply from: 'private.gradle'
}

artifactory {
	contextUrl = 'http://server.bbkr.space:8081/artifactory/'
	publish {
		repository {
		if(version.contains("SNAPSHOT")){
				repoKey = "libs-snapshot-local"
			}else{
				repoKey = "libs-release-local"
			}
			username = artifactoryUsername
			password = artifactoryPassword
		}
		defaults {
			publications('maven')

			publishArtifacts = true
			publishPom = true
		}
	}
}


publishing {
	publications {
		maven(MavenPublication) {
			from components.java

			artifactId = "cotton-resources"

			pom.withXml {
				def pomFile = asNode()
				def depsNode = pomFile.get("dependencies")
				pomFile.remove(depsNode)

				def newDeps = pomFile.appendNode("dependencies")
				configurations.modCompile.getResolvedConfiguration().getFirstLevelModuleDependencies().each {
					def artifactNode = newDeps.appendNode("dependency")
					artifactNode.appendNode('groupId', it.moduleGroup)
					artifactNode.appendNode('artifactId', it.moduleName)
					artifactNode.appendNode('version', it.moduleVersion)
				}
			}
			artifacts = [
				artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${version}.jar") { //release jar - file location not provided anywhere in loom
					classifier null
					builtBy remapJar
				},
				artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${version}-dev.jar") { //release jar - file location not provided anywhere in loom
					classifier "dev"
					builtBy remapJar
				},
				artifact (sourcesJar)
			]
		}
	}
}

task sourcesJar(type: Jar) {
	baseName = archivesBaseName
	classifier = "sources"
	from sourceSets.main.allSource
	from sourceSets.main.resources
}
